* 2017-10-15
#+BEGIN_SRC bash
sudo apt install ros-kinetic-map-server
sudo apt install ros-kinetic-move-base
roslaunch ev3_nav move_base_blank_map.launch
#+END_SRC
- changed base_footprint to base_link in config/*costmap_params.yaml
- setting goals in rviz does not work
#+BEGIN_SRC bash
rostopic info /move_base_simple/goal # ok
rostopic echo /move_base_simple/goal # nothing
#+END_SRC
- something dodgy with the static transform /map /odom in rviz
- it's because the bloody Virgin router assigned a wrong IP to the laptop !!
- after fixing the ip address, settings 2D Nav goals work !! That's good for today, let's commit and play the guitar
** Automatic network setup on Z83
- enabled ip forward permanently
#+BEGIN_SRC bash
sudo vi /etc/sysctl.conf
# Uncomment this line:
# net.ipv4.ip_forward=1
#+END_SRC
- saved ip tables:
#+BEGIN_SRC bash
sudo iptables -t nat -A POSTROUTING -o wlx74da388bd929 -j MASQUERADE
sudo iptables -t nat -A POSTROUTING -o enp0s20u1u3 -j MASQUERADE
sudo iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -i enp0s20u1u3 -o wlx74da388bd929 -j ACCEPT
sudo iptables -A FORWARD -o enp0s20u1u3 -i wlx74da388bd929 -j ACCEPT
sudo sh -c "iptables-save > /etc/iptables.rules"
#+END_SRC
- Added this to z83:/etc/network/interfaces:
#+BEGIN_SRC 
auto enp0s20u1u3 
iface enp0s20u1u3 inet static
  pre-up iptables-restore < /etc/iptables.rules
address 192.168.10.120
netmask 255.255.255.0
#+END_SRC
- it worked ok but I had to restart the interface for some reason:
#+BEGIN_SRC bash
sudo ifdown enp0s20u1u3 
sudo ifup enp0s20u1u3 
#+END_SRC
* 2017-10-09
- tried to run rosrun ev3_nav nav_square.py
- missing PyKDL library, which does not seem to be there since ros hydro.
- but this exists: http://wiki.ros.org/kdl_conversions
- need to implement Rotation.Quaternion in transform_utils.py
- this can be useful: http://wiki.ros.org/Tutorials/Quaternions
* 2017-10-02
- setup catkin workspace:
#+BEGIN_SRC bash
cd projects/rosev3
catkin_make
echo "source ~/projects/rosev3/devel/setup.bash" | tee >> ~/.bashrc

# Now I can run things without cd'ing:
roslaunch ev3_bringup r200.launch
#+END_SRC
  
* 2017-10-01
- wifi connection ok if laptop on ethernet
- if not, ping ev3dev from asterix ok, but slow in the other way
- refresh rate of camera not as fast as with ethernet
- can build a wonky map, but the position jumps a lot. calibration issue?
* 2017-09-30
- ethernet link ok
- map seems to work OK 
- oddly, I can't visualize point cloud / laserscan when fixed frame = map. And I can't visualize map when fixed_frame = base_link
- it looks like I am missing a tf odom -> base_link
- probably because I cannot ping ev3dev from asterix => on asterix:
#+BEGIN_SRC bash
sudo ip route add 192.168.10.0/24 via 192.168.0.33 dev enp0s25
#+END_SRC
- with that change everything works fine !! :-)
- the camera view changes quickly on ethernet. 
- Next steps:
  - check with Wifi
  - try setting a goal on rviz and use navigation, try putting some obstacle
  - if all of that works, it will be time to make an instructable !
  - try to fork the turtlebot3 packages: https://github.com/ROBOTIS-GIT/turtlebot3
* 2017-09-25
** Setup ethernet link between Laptop <-> Z83
- on PC:
sudo ip addr add 192.168.1.21/24 dev enp0s25
sudo vi /etc/hosts
# Replace IP for z83
- on z83:
sudo ip addr add 192.168.1.29/24 dev enx00e04c689e10
sudo vi /etc/hosts
# Replace IP for asterix
- for persistent: https://michael.mckinnon.id.au/2016/05/05/configuring-ubuntu-16-04-static-ip-address/

But thinking about it, it is much easier to just plug laptop and Z83 to the powerline adapter !!
- Advantage: no problem for routing internet traffic, especially ntp
- plug Z83 to powerline
- add DHCP reservation
- change /etc/hosts on Laptop
* 2017-09-24
** Trying to debug wifi issues
- edimax dongle on laptop: 35 ms ping, 2.5 Mb/s 
- laptop wifi: 17 ms, 3 Mb/s
- next time: try pluging an ethernet cable in the Z83. If something goes wrong, it won't be because of the Wifi
* 2017-08-12
** Route from laptop to ev3dev
- on z83:
#+BEGIN_SRC bash
sudo iptables -A FORWARD -o enp0s20u1u1 -i wlx74da388bd929 -j ACCEPT
sudo iptables -t nat -A POSTROUTING -o wlx74da388bd929 -j MASQUERADE
# on ev3dev: add asterix to /etc/hosts
# on asterix: add ev3dev to /etc/hosts
# on asterix:
sudo ip route add 192.168.10.0/24 via 192.168.0.33 dev enp0s25
#+END_SRC
** Update
- ran robot and rviz, got some good laser scans, but the wifi fails intermittently
- it might be due to the wifi range, it looks like the communication is better when the robot is close to the AP
- next time: use Linksys router, plug laptop
* 2017-08-05
** Enable internet access on ev3dev
- this solves the date synchronization issue
- on ev3dev: changed /usr/local/bin/gadget_on to specify gateway and nameservers
- on z83:
#+BEGIN_SRC bash
sudo sysctl -w net.ipv4.ip_forward=1
sudo iptables -t nat -A POSTROUTING -o wlx74da388bd929 -j MASQUERADE
sudo iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
sudo  iptables -A FORWARD -i enp0s20u1u1 -o wlx74da388bd929 -j ACCEPT
#+END_SRC
- TODO: save routing config for next reboot

** Startup procedure
#+BEGIN_SRC bash
# On laptop
sudo ip route add 192.168.10.0/24 via 192.168.0.29 dev enp0s25

# start z83
ssh z83
# start ev3dev (the USB port must be active for the ev3_gadget service to start)
# On z83
sudo ~/projects/rosev3/wlan-iptables.sh
ping ev3dev
# if it does not work, try plugging a USB Keyboard on ev3, type root<enter>gadget_on<enter>
# run projects/rosev3/wlan-iptables.sh
ssh root@ev3dev

# On ev3dev
date 
# => check it is in sync. If not, check internet access. 
ping 8.8.8.8
ping www.google.fr
ping asterix # Verify that asterix really has that IP !
# if DNS not configured, systemctl restart ev3-gadget 
ev3_manager

# On z83 (open new terminal, ssh z83)
roslaunch ev3_bringup motors.launch
# - cd projects/rosev3
# - ./startall.sh

# On laptop (open new terminal)
ping ev3dev # If it does not work, check ip route
rosrun rviz rviz &
# change fixed frame to map
# add Map visualization, change topic to /map
#+END_SRC

** Debug procedure
- check networking between ev3dev <-> z83 <-> laptop
- ping between machines.
- check "ip a": sometimes the router could give a wrong IP
#+BEGIN_SRC bash
# On one machine
nc -l 1234
# on the other machine
echo hello|nc the_other_machine_hostname 1234
#+END_SRC
- use only hostnames to test it. hostnames and IPs should be consistent accross all devices
- in rviz, set fixed frame as /map, and check if TF does not have any warnings

** Progress 
- debug tf: rosrun tf view_frames && evince frames.pdf
- missing transform base_link -> odom
- stop r200
- rosrun tf tf_echo /base_link /odom => ok on z83, but not on asterix !?
- could it be because of a communication issue between asterix and ev3dev ?
- TODO for next time: try to add routing in z83 to forward packets from asterix, and add entries in /etc/hosts on both sides
- disabled possible Wifi driver that causes an issue: https://askubuntu.com/questions/896212/wifi-unstable-with-edimax-ew-7811un
#+BEGIN_SRC bash
sudo vim /etc/modprobe.d/blacklist.conf
blacklist rtl8192cu
#+END_SRC

* 2017-06-28
** Z83
- /etc/modprobe.d/blacklist.conf 
blacklist brcmfmac
- sync the clock on ev3: change /etc/ntp.conf 
#+BEGIN_SRC 

#+END_SRC
- automate the startup steps
** ev3dev setup
- Put this in /lib/systemd/system/ev3_manager.service
#+BEGIN_SRC bash
# TODO !!!

#+END_SRC
* 2017-06-04
- received USB 3 Hub
- connected EV3 brick to Z83 using USB cable
- got teleop working !
- the wifi on z83 is very unstable though, the connection drops frequently. Maybe disconnecting other computers could help
** EV3DEV setup
- Put this in /usr/local/bin/gadget_on
#+BEGIN_SRC 
#!/bin/bash
PATH=/usr/bin:/bin
gadget_interface=`connmanctl services | grep -oh "gadget_[a-z0-9]*_usb"`
if [ "$?" != "0" ]; then echo -e "Could not find gadget!\n USB Cable Connected?\n"; exit 1; fi
    
connmanctl enable gadget || true
connmanctl disconnect $gadget_interface

connmanctl config $gadget_interface --ipv4 manual 192.168.10.123 255.255.255.0 192.168.10.120 --nameservers 8.8.8.8
if [ "$?" != "0" ]; then echo -e "Could not set config!"; exit 1; fi
    
connmanctl connect $gadget_interface
if [ "$?" != "0" ]; then clear; echo -e "Could connect Gadget!\n"; exit 1; fi
#+END_SRC

- put this in /lib/systemd/system/ev3-gadget.service
#+BEGIN_SRC bash
[Unit]
Description=LEGO MINDSTORMS EV3 USB Ethernet Gadget
After=multi-user.target

[Install]
WantedBy=multi-user.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/bin/sh -c '/usr/local/bin/gadget_on'
ExecStop=/bin/sh -c '/usr/local/bin/gadget_off'
#+END_SRC

#+BEGIN_SRC bash
systemctl enable ev3-gadget.service
echo '192.168.10.120  z83' >> /etc/hosts
ros_ip_set 192.168.10.123
ros_master_set z83
#+END_SRC

** Z83 setup
- the ev3 must be booted before I can setup the ip on z83
- connect from Z83 to EV3:
#+BEGIN_SRC bash
sudo ip addr add 192.168.10.120/24 dev enp0s20u1u1
sudo echo '192.168.10.123 ev3dev' >> /etc/hosts
ssh root@ev3dev
#+END_SRC

* 2017-05-19
** Reinstall Windows 10
*** Resize Ubuntu partitions
- Windows media creation tool did not work
- Create Ubuntu Live USB stick using Ubuntu Startup Disk creator
- Boot on Ubuntu from the USB stick
- Resize LVM partition:
#+BEGIN_SRC 
sudo lvreduce -r -L-10G /dev/ubuntu-vg/root
# Now we need to move the swap lv just after the root lv
# Check where the Swap lv extent lie
sudo pvdisplay --maps
pvmove --alloc anywhere /dev/mmclbk0p3:1000-1999 /dev/mmclbk??:0-999
#+END_SRC
- Resize physical volume using GParted
*** Install Windows 10
- Create a Windows 10 USB bootable device from Ubuntu
- Using GParted, Create a GPT partition table on the USB stick, NTFS partition with 6GB
#+BEGIN_SRC bash
sudo mount ~/Downloads/Win10_1703_English_x64.iso /mnt
cd /media/mikael/238DEE6F63BCC337
sudo cp -r /mnt/* ./
#+END_SRC
- Change EFI settings to boot on USB
* 2017-05-18
- tried to upgrade the kernel to get the i2c patch
#+BEGIN_SRC bash
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12-rc1/linux-headers-4.12.0-041200rc1_4.12.0-041200rc1.201705131731_all.deb
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12-rc1/linux-headers-4.12.0-041200rc1-generic_4.12.0-041200rc1.201705131731_amd64.deb
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12-rc1/linux-image-4.12.0-041200rc1-generic_4.12.0-041200rc1.201705131731_amd64.deb
sudo dpkg -i *headers* *image*
#+END_SRC
- upgraded lib-firmware to get /lib/firmware/brcm/brcmfmac43430-sdio.bin
#+BEGIN_SRC bash
sudo apt-get upgrade lib-firmware
#+END_SRC
- now dmesg shows that brcmfmac is missing /lib/firmware/brcm/brcmfmac43430-sdio.txt
- internet says I should get it in /sys/firmware/efi/efivars/nvram-*, but I don't have such file
- the Wifi dongle seems more stable when plugged in the USB3 port...
- installed efivar, dpgk complained, ran sudo dpkg --configure -a, lots of stuff going on, but nothing has changed
- next step: try to install Windows and see if that magic nvram file appears in EFI

* 2017-05-07
- installed Ubuntu using the "Startup disk creator" in Ubuntu to make the USB stick
- Linux is installed, but Wifi does not work
- checked lspci, lsusb, no Wireless card appears.
- found a similar stack trace in /var/log/syslog: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1625440
- this guy seems to provide patches: http://www.linuxium.com.au/how-tos/runningubuntuontheintelcomputestick
- It looks like the Wifi driver will soon be included in Linux kernel: http://linuxiumcomau.blogspot.com/2017/04/rtl8723bs-wifi-soon-to-hit-mainline.html and https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1581711
- in the meantime, I'll use the Wifi dongle
- set up ssh:
#+BEGIN_SRC bash
sudo apt install openssh-server
#+END_SRC
- Set up wifi, Network Manager / Edit Connection. Select your connection, click Edit and check "Available to all users".
- Set text mode https://askubuntu.com/questions/16371/how-do-i-disable-x-at-boot-time-so-that-the-system-boots-in-text-mode
- install ros:
#+BEGIN_SRC bash
sudo apt-get install ros-kinetic-ros-base
sudo apt-get -y install ros-kinetic-librealsense
sudo apt-get -y install ros-kinetic-realsense-camera
sudo apt-get -y install ros-kinetic-depthimage-to-laserscan
sudo apt-get -y install ros-kinetic-gmapping

echo 'source /opt/ros/kinetic/setup.sh' >> ~/.bashrc

#+END_SRC
* 2017-05-06
- Tried to install linux on the Z83 S
- cannot boot on the Micro SD, requires a card reader
- accidentally destroyed the Windows partition table, tried to rescue with System Rescue CD with TestDisk
- SystemRescueCD wouldn't boot because of the EFI, I had to follow this to make a bootable USB: https://askubuntu.com/questions/395879/how-to-create-uefi-only-bootable-usb-live-media
* 2017-04-19
- SLAM works !!
- now I need to configure move_base to set goals http://wiki.ros.org/navigation/Tutorials/RobotSetup
- I may need amcl if I want to use a saved map. http://answers.ros.org/question/67567/is-amcl-necessary-for-exploration-if-gmapping-is-already-running/
- I need to tweak the static tf transform, when I look at the point cloud my foot is under the ground !
- It would be nice to have a single run.sh script, including the startup of ev3_manager on the ev3
* 2017-04-18
- setup launch file for gmapping
- useful command to view tf transformations:
#+BEGIN_SRC bash
rosrun tf tf_echo /map /odom
#+END_SRC
- TF visualization in RViz is very useful
- In the documentation, base_link -> odom means 'odom is the PARENT of base_link'
- I think I need to add the following transform:
#+BEGIN_SRC bash
rosrun tf static_transform_publisher 0.0 0.0 0.1 0.0 0.0 0.0 base_link camera_link 1000
#+END_SRC
* 2017-04-17
** R200 in docker
Found out why the camera was not detected in Docker:
- this was due to /dev/video* not accessible to ros user !!!
- maybe I should delete that ros user ? 
- What is the point of having a separate user? Maybe for X window ?
** rtabmap_ros
- tried this tutorial: http://wiki.ros.org/rtabmap_ros/Tutorials/HandHeldMapping
- did not get what that means: "To get registration without empty lines" ?
- looked promising, got some portion of a map, but it loses the odometry very quickly, as soon as it does not face a close wall
** depthimage_to_laserscan
- need to remap the topic. Otherwise looks good in RViz !
#+BEGIN_SRC bash
rosrun depthimage_to_laserscan depthimage_to_laserscan image:=/camera/depth/image_raw
#+END_SRC
* 2017-04-16
Trying to get the R200 to work in docker.
- dmesg on the host shows it is connected
- VLC in capture mode on /dev/video1, 2 3 shows the camera 
BUT the ros node in docker cannot find the camera
- tried to disable the build-in camera, same
- installed ros kinetic and ran directly on the host => works fine !!
#+BEGIN_SRC bash
rosrun rviz rviz &
roslaunch realsense_camera r200_nodelet_default.launch
#+END_SRC
- to get the point cloud, run
#+BEGIN_SRC bash
roslaunch realsense_camera r200_nodelet_rgbd.launch

#+END_SRC
** Laptop webcam
- add devices /dev/video0 in docker-compose.yaml
- in a ros docker container:
#+BEGIN_SRC bash
sudo chmod go+rw /dev/video0 && rosrun usb_cam usb_cam_node _video_device:=/dev/video0
#+END_SRC
- rviz can visualize /usb_cam/image_raw
* 2017-02-26
- Found a cool blog describing ipvlan and macvlan https://hicu.be/macvlan-vs-ipvlan
  I might be able to run the containers over wifi using ipvlan.
- TODO try to use DHCP to simplify the network configuration. Ideally users of the docker images should not have to change any IP address
* 2017-01-31
** LSD SLAM after calibration
#+BEGIN_SRC bash
rosrun camera_calibration cameracalibrator.py --size 11x7 --square 0.01 image:=/usb_cam/image_raw camera:=/usb_cam
# move around the chessboard, calibrate, commit
rosrun lsd_slam_core live_slam /image:=/usb_cam/image_raw /camera_info:=/usb_cam/camera_info
# Received ROS Camera Calibration: fx: 533.319824, fy: 534.331848, cx: 304.340820, cy: 239.917526 @ 640x480
#+END_SRC
Result: got a very messy point cloud, where we could recognize some shapes. 
There is very little chance this could be useful for SLAM.
I'm starting to accept that there won't be a cheap solution for SLAM.
- I could use an Intel R200 with this compute stick: http://www.ebay.co.uk/itm/Quad-Core-Windows-10-2GB-RAM-32GB-eMMC-WiFi-BT4-0-HDMI-Mini-PC-Compute-Stick/112271294744?_trksid=p2045573.c100642.m3226&_trkparms=aid%3D555014%26algo%3DPL.DEFAULT%26ao%3D1%26asc%3D20160706104836%26meid%3Dc5b276a53b1740fbb44b95aea5b48cdf%26pid%3D100642%26rk%3D1%26rkt%3D1%26
** PS3 Eye on the EV3
- tried to plug the camera on the EV3 brick via a USB Hub
- usb_cam is not installed, but gscam is
- tried http://wiki.ros.org/gscam#Running but got this error:
(gst-plugin-scanner:416): GLib-GObject-WARNING **: cannot register existing type 'GstVorbisDec'

(gst-plugin-scanner:416): GLib-CRITICAL **: g_once_init_leave: assertion 'result != 0' failed

(gst-plugin-scanner:416): GStreamer-CRITICAL **: gst_element_register: assertion 'g_type_is_a (type, GST_TYPE_ELEMENT)' 
- lsusb shows the camera
- /dev/video0 is not created. Tried to follow instructions here: https://github.com/ev3dev/ev3dev/issues/64
- "v4l2-ctl  --list-devices" does not show anything
- this webcam is probably not supported. It could also be caused by this specific ev3dev installation
* 2017-01-30
** Computer vision
http://robotics.stackexchange.com/questions/7014/what-main-factors-features-explain-the-high-price-of-most-industrial-computer-vi
** Calibrate using camera_calibration
- Follow http://wiki.ros.org/camera_calibration/Tutorials/MonocularCalibration
- print https://github.com/ethz-asl/ethzasl_ptam/blob/master/ptam/calib_pattern.pdf
#+BEGIN_SRC bash
rosrun camera_calibration cameracalibrator.py --size 11x7 --square 0.01 image:=/usb_cam/image_raw camera:=/usb_cam
#+END_SRC
- then use image_proc ? http://wiki.ros.org/image_proc
* 2017-01-27
** Calibrate the camera
- follow this: http://wiki.ros.org/ethzasl_ptam/Tutorials/camera_calibration
- print https://github.com/ethz-asl/ethzasl_ptam/blob/master/ptam/calib_pattern.pdf
#+BEGIN_SRC bash
vi ~/catkin_ws/src/ethzasl_ptam/ptam/PtamFixParams.yaml
# Change webcam resolution
vi ~/catkin_ws/src/ethzasl_ptam/ptam/launch/cameracalibrator.launch
# Change topic name usb_cam/image_raw
roslaunch ptam cameracalibrator.launch

#+END_SRC
* 2017-01-26
- got the lsdlam working !! But the result is rather poor. I need to calibrate my camera
- this should help: http://www.icg.tugraz.at/courses/ARVU/install.pdf
- struggled to run the lsd packages from docker-compose. 
  The issue was that I was missing -i in the command section, hence .bashrc was not run
* 2017-01-25
- Tried to setup bumblebee: https://lenovolinux.blogspot.co.uk/2016/05/bumblebee-on-lenovo-t440p-nvidia-gt.html
- got a black screen in the end, reverted
- compiled the opengl branch of nvidia-docker, ran glxgears in docker
#+BEGIN_SRC bash
git clone https://github.com/NVIDIA/nvidia-docker.git
cd nvidia-docker/
make deb
cd tools/dist
sudo dpkg -i nvidia-docker_1.0.0-1_amd64.deb 
xhost +
nvidia-docker run -it -v /tmp/.X11-unix:/tmp/.X11-unix nvidia/cuda bash
apt update
apt install mesa-utils
glxgears
#+END_SRC
- tried to update the lsdlam image with the last 4 lines of https://gitlab.com/nvidia/cuda/blob/ubuntu16.04/8.0/runtime/Dockerfile, did not work
- next time: try to rebuild a OpenGL image from ubuntu 14.04
* 2017-01-24
- installed NVIDIA drivers: Ubuntu -> Additional drivers
- installed nvidia-docker: https://github.com/NVIDIA/nvidia-docker/wiki#quick-start
- installed nvidia-docker-compose: https://github.com/eywalker/nvidia-docker-compose
- ran the lsdslam image, got errors
- nvidia-docker does not support OpenGL: https://github.com/NVIDIA/nvidia-docker/issues/11
- tried this: https://github.com/thewtex/docker-opengl  
  good way of distributing a noob proof docker image 
  but the glxgears only ran with 1200 fps - got 10000 fps when directly on ubuntu
- glmark2 score: 1197 for ubuntu native with nouveau driver
* 2017-01-24
- created a docker image for lsd-slam https://github.com/tum-vision/lsd_slam
- the quickstart works, but is quite slow
- next time: try to use the Nvidia extensions for docker
* 2017-01-23
** How to do SLAM using cheap hardware ?
- LSD SLAM is great: https://github.com/tum-vision/lsd_slam but monocular only, 
  and does not publish live point clouds (see at the bottom of the page)
- Stereo LSD SLAM seems awesome, but no code ? https://github.com/tum-vision/lsd_slam/issues/153
- This looks alright: http://wiki.ros.org/rtabmap_ros/Tutorials/StereoOutdoorMapping
- This looks cool too: https://github.com/srv/stereo_slam
- other option: Poor man's lidar using the IR sensor and a servo: http://www.pirobot.org/blog/0014/
- Kinect equivalent: https://orbbec3d.com/product-astra/
- Cheap stereo webcam: https://www.amazon.co.uk/Konig-3D-3MP-Webcam-Glasses/dp/B004CRYEO0/ref=sr_1_1?ie=UTF8&qid=1485244797&sr=8-1&keywords=3d+webcam
- Lego pi camera mount: http://www.mindsensors.com/rpi/157-camera-mount-for-pistorms
- Raspberry driver for stereo camera: http://www.linux-projects.org/documentation/uv4l-raspicam/
* 2017-01-22
** Square using odom
- robot can do squares:  rosrun rbx1_nav odom_out_and_back.py
- but the result is not as good as in the book. However rviz display is quite close to reality
- accuracy could probably be improved with a Gyro sensor
** Square using move_base
- p 119
- setup rviz in the ros_by_example image so that I can use nav.rviz
#+BEGIN_SRC bash
docker-compose up rviz
run.sh
docker exec -it ev3_launch bash
roscd rbx1_nav/config/turtlebot
vi global_costmap_params.yaml
# change base_footprint to base_link
vi local_costmap_params.yaml
# change base_footprint to base_link
roslaunch rbx1_nav tb_move_base_blank_map.launch &
rosrun rbx1_nav move_base_square.py
#+END_SRC
- the robot arrived less than 10cm away from its original position !
- but the rviz run from docker-compose does not load nav.rviz - TODO fix for next time, it runs fine in a shell
- I can set goals to the robot, and it executes them !!

* 2017-01-16
- installed patch https://github.com/Hacks4ROS/h4r_ev3_ctrl/releases
- it solved the issue, I can now calibrate the angular motion.  
* 2017-01-15
- the robot moves without any command as soon as the motor controller is started
- spent 3 hours figuring out why. It turns out I added 1 whitespace to motor.yaml/min_acceleration !!!!
- it looks like there is a bug in this setting. If I set it to 0 I have similar issues when calibrating.
- note for later: commit things as soon as they work, revert if things are broken
- linear calibration: multiply wheel_radius by odom_linear_scale_correction
- angular calibration: reducing the wheel_separation slows down the rotations tremendously. 
  Increasing it trieggers an infinite rotation. 
- the only way to have few movements with angular_calibration is to put an angle of 2.
- rostopic echo /odom during a teleop shows that the z position barely changes
- rostopic echo /ev3dev/joint_states during a teleop shows that the position/velocities are positive for both motors.
  should one of them be negative ?
- debug motor states:
#+BEGIN_SRC bash
cd /sys/class/tacho-motor/motor1
watch -n 0.2 cat position
watch -n 0.2 cat polarity
#+END_SRC
* 2017-01-14
** Research a low cost slam sensor
- $100 Intel R200: requires powerful USB 3 board
- $150 LidarLight v2 with DIY motors: http://grauonline.de/wordpress/?page_id=1233
- $25 Hacked tUni-T UT390b telemeter: http://www.instructables.com/id/Simple-LiDAR-using-the-laser-rangefinder-Uni-T-UT3/
** Calibration
- Ros by example p. 65
#+BEGIN_SRC bash
docker exec -it ev3_launch bash
rosrun rqt_reconfigure rqt_reconfigure &
rosrun rbx1_nav calibrate_linear.py
rosrun rbx1_nav calibrate_angular.py
#+END_SRC
- Result: odom_linear_scale_correction should be 0.1092
- But no way to specify it in diffDrv
- Changed wheel_separation and wheel_radius, got better results with faster motion !

* 2017-01-10
- enabled ir proximity
- looked into the H4R code. It uses http://wiki.ros.org/ros_control
- I can find the IR YAML parameters by looking at https://github.com/Hacks4ROS/h4r_ev3_ctrl/blob/6a389638a0847b03e0fe97e9f0f5530d12af22a4/h4r_ev3_control/src/h4r_ev3_control/ev3_infrared_controller.cpp
- the diffDrive parameters are described here: http://wiki.ros.org/diff_drive_controller
- tried to use remap to change the topic names for diffDrv, with no luck. It is actually a known issue: https://github.com/ros-controls/ros_controllers/issues/126
- discovered some nice scripts on the ev3 in /usr/local/bin : I can activate all ports from there
- next time: use relay in the launch file and try to calibrate
* 2017-01-08
** Teleop works !!
#+BEGIN_SRC bash
# on ev3
vi /etc hosts
# add master and ev3_launch ips
ev3_manager

# on host
docker-compose up -d master ev3_launch
docker exec -t ev3_launch bash
rosrun topic_tools relay /cmd_vel /ev3dev/diffDrv/cmd_vel &
sudo apt-get install ros-indigo-teleop-twist-keyboard
rosrun teleop_twist_keyboard teleop_twist_keyboard.py
#+END_SRC
* 2017-01-07
- It appears that linux network bridging does not work with Wifi cards. 
  There is a solution with ebtables https://wiki.debian.org/BridgeNetworkConnections#Bridging_with_a_wireless_NIC but it is quite involved.
- the easiest will be to plug the laptop with an ethernet cable - or use the iMac remotely and launch docker containers from there.
- set up my old friend the Linksys WRT54 as an Access point, plugged on the powerline - Wifi in the living room now works like a charm
  
* 2017-01-05
** got the USB Wifi dongle
It was quite fiddly to make it work:
- the connection to the iMac shared connection seemed to work, but impossible to find the allocated IP
- then I switched to the Virgin Media router, but it was appearing as still having 192.168.10.123 instead of 192.168.0.x
- forced a pre-allocation in DHCP settings, now it appears with both addresses but at least I can ssh to it via Wifi
- now I can ssh to ev3dev.local (zero conf works !), but the docker container cannot see the rest of the wifi network !? 
  it was working yesterday with the USB ethernet
* 2017-01-04
** Another approach: H4R EV3 - linux on the EV3 brick
- installed H4R EV3, managed to SSH to the EV3 brick
- the EV3 brick does not work with an apple keyboard, you need a pc keyboard
- ordered a wifi dongle. Cannot use the Wifi AND the USB ethernet at the same time - something to do with the default interface
- improved the ros-indigo-zt/docker-compose.yml to create a rosnet network with macvlan
- the ev3dev can ping the docker container
- ran ev3_manager and ir.launch on the ev3, but got an error :
roslaunch ./ev3_ir.launch ev3_hostname:=192.168.10.123
[WARN] [WallTime: 1455389457.181423] Controller Spawner couldn't find the expected controller_manager ROS interface.
- ran ir.launch on the docker container, got the same error after having installed controller_manager
- added master in /etc/hosts on ev3dev, and added ev3dev in /etc/hosts on master
- Now I get the ir topics !!!
- Next time: change the rosnet in docker-compose to add ev3dev

* 2017-01-02
- tried to investigate why rostopic echo does not do anything
- added log information, stuff is published but does not appear in the master node
- I am tempted to give up with the android solution and use this instead: http://hacks4ros.github.io/h4r_ev3_ctrl/
* 2016-12-20
** Network connectivity check
Network connectivity is OK between Android and the docker machine. 
Tried with "nc -l -p 1234" on the Docker machine and with "curl http://masterleakimav.hopto.org:1234" on Android.
For some reason "echo hello|nc masterleakimav.hopto.org 1234" says "bad address".
On stackoverflow, people say that you need busybox for this to work with DNS.
* 2016-12-19
- tried to run the ros-teleop docker container, did not work
- rostopic echo /voltage does not work
- set up 3 noip addresses: one for ev3, one for master, one for node1. Associated them with the ZeroTier IP addresses
- set dns = 8.8.8.8 and dns_search = hopto.org in docker-compose.yml
- all nodes can now ping each other using a hostname
- but rostopic echo /voltage still does not work
- next step: use android debug to see what is going on. Would be nice to have some logs/self check in the app itself ?
* 2016-12-13
- resolved runtime issue with apache commons codec: use transitive=true for httpclient
- the App runs and can connect to the master node !!
* 2016-12-12
- trying to recompile the project
- jar hell: added transitive = false and resolved warnings one by one, by adding missing dependencies and by adding directives to proguard.
* 2016-12-09
- moved everything to one project, tried to make the project compile
* 2016-12-06
- used adb to see the logs when the app crashes. There is a missing class from dnsjava: java.lang.NoClassDefFoundError: Failed resolution of: Lorg/xbill/DNS/Address;
- started to migrate to gradle. Installed gradle in /opt. The default version with apt-get is very old
- gradle is very picky w.r.t. SDK version. It complained that I did not accept the license for version X when I specified X.0 in the build.gradle and I installed X.1
- fiddling with gradle multi-modules, can't make it compile. Next step: merge everything in one module and avoid the pain !
* 2016-12-04
- tried to echo /cmd_vel using ros_teleop. It does NOT work if I run the teleop docker container without --name... 
  ROS is very picky about hostnames, and docker run generates a new hostname every time.
- improved ros-teleop/run.sh: 3 containers with a rostopic echo. rostopic echo must be run AFTER the topic is created
  Unfortunately it seems I cannot use the arrow keys in a windows terminal with docker attach. But it works with docker run.
  It could be related to https://github.com/docker/docker/issues/13817
- setting the DNS on the Android wifi is a pain, I need to find a better solution.
  The App could have another setting for the DNS, or use zeroconf. Does zeroconf work with zerotier and docker ?
  Another option would be to use a public dns: dyndns or noip. Or maybe just set the master using a zerotier IP address ?
- tried to teleop with android connecting to the docker master, but the android app crashes. It even rebooted the OS.
  next step: make the teleop work, debug the android app

* 2016-11-27
- ev3-android: fixed connection to non-local master !
- wifi connection is patchy, random disconnections are annoying !
- if android is OFFLINE in adb, disable/enable debug over tcp/ip
- tried the calibration again p43, but no luck.
- less ~/catkin-ws/src/rbx1/rbx1_nav/nodes/calibrate_linear.py : no clue why nothing happens
* 2016-11-23
- compiled the project in IntelliJ, fixed 2 issues with deprecated methods
- cannot use Android USB over NoMachine ?
- emabled ADB over TCP/IP:
#+BEGIN_SRC bash
adb tcpip 5555
# On Android, Developer options -> enable ADB over network
adb connect ev3:5555
#+END_SRC
- /opt/android-sdk/tools has disappeared, maybe I unchecked the wrong box (platform tools)
- un-tared the android sdk and checked platform tools, now I have a new version of adb in /opt/android-sdk/platform-tools
- managed to deploy the application and got the ROS topics !! 
- next step: try the TF fix, commit the android code to github, use gradle to get rid of lib/*.jar
* 2016-11-22
- setup IntelliJ and Android SDK
- checked out Lego Ros: https://sourceforge.net/p/ev3javabrick/wiki/EV3%20communication%20library/
- there is a tf and odom publication, but it seems like they have the wrong frameId
- struggled to compile the project, it requires Android 23 and JDK 1.7
- got an error "Error:android-apt-compiler: Cannot run program "/opt/android-sdk/build-tools/23.0.3/aapt": error=2, No such file or directory". 
  It may be because my ubuntu does not support 32 bits binaries: http://stackoverflow.com/questions/19523502/how-to-make-androids-aapt-and-adb-work-on-64-bit-ubuntu-without-ia32-libs-work 
* 2016-11-20
- tried to connect from Android to master in docker, does not work. No logs, nothing using tcpdump on the docker container. I should inspect android's logs to debug this.
- lesson learned: tcpdump -i zt0 only shows stuff if you are on the same machine, ZeroTier might not broadcast packets to the whole network.
- blocked the DNS access from the docker container after having set the IP filtering on EC2 security group. Solved it by adding DNS rules
- ran rviz in docker, this will be useful for GPU acceleration: http://wiki.ros.org/docker/Tutorials/Hardware%20Acceleration
- ran teleop, I can remote control the robot !!! If rostopic list does not show the EV3 topic, unplug/replug the USB cable.
- the ping between any machine and ev3 is quite long and inconsistent, it might be due to the wifi or android being too loaded ?
- setup ros-by-example docker image, reproduced Arbotix simulation with RViz Chapter 6. I had to change the fixed frame to /odom in rviz and add an odometry visualisation
- setup rqt_reconfigure, tried to calibrate (7.4). But it looks like I am missing a tf base_link.
- rosrun tf view_frames && evince frames.pdf => nothing
    
* 2016-11-19
Cannot start the remote desktop. 
#+BEGIN_SRC bash
sudo less /usr/NX/var/log/nxserver.log
rm -rf ~/.config
sudo systemctl restart lightdm 
# Disable X11
sudo systemctl isolate multi-user.target
sudo systemctl enable multi-user.target
sudo systemctl set-default multi-user.target
sudo vi /usr/NX/etc/server.cfg
# CreateDisplay 1 
# DisplayOwner "ubuntu"
#+END_SRC
- added master in /etc/hosts
- set ROS_MASTER_URI=http://ev3:11311 solved the communication issue !!
- I can now do rostopic echo /voltage, but the image is still grey 
- Learned more about docker-compose: run can override the build's run command, used entrypoint
- solved two bugs with the image_view, but still no image: 
  - https://github.com/jsk-ros-pkg/jsk_travis/issues/187 sudo ln /dev/null /dev/raw1394
  - sudo apt-get install libcanberra-gtk*

* 2016-11-18
** ZeroTier in docker

#+BEGIN_SRC bash
docker run  -it --rm --cap-add=NET_ADMIN --cap-add=SYS_ADMIN --device=/dev/net/tun -v /tmp/.X11-unix:/tmp/.X11-unix -e ROS_MASTER_URI=http://ev3:11311 ros-image-pipeline bash
curl https://install.zerotier.com/ | bash
sudo zerotier-cli join ...
#+END_SRC
#+BEGIN_SRC bash
vim Dockerfile
# see committed file
docker build -t ros-image-pipeline  .
docker run  --dns 52.51.247.240 -it --rm -v ~/zerotier-one:/var/lib/zerotier-one --cap-add=NET_ADMIN --cap-add=SYS_ADMIN --device=/dev/net/tun -v /tmp/.X11-unix:/tmp/.X11-unix -e ROS_MASTER_URI=http://ev3:11311 ros-image-pipeline 
# identity is preserved using the volume; use a different volume for a different identity
#+END_SRC
* 2016-11-17
** Gateway
Let's try to route all my traffic through the AWS host: https://www.zerotier.com/community/topic/69/default-route-override-a-k-a-full-tunnel-in-1-1-6
If this works, I can watch irish TV !
#+BEGIN_SRC bash
sudo vi /etc/sysctl.conf
/ip_forward
0x:w

sudo iptables -t nat -A POSTROUTING -o eth0 -s 10.242.0.0/16 -j SNAT --to-source 52.51.247.240
sudo iptables -A FORWARD -i eth0 -s 0.0.0.0/0 -d 10.242.0.0/16 -j ACCEPT
sudo iptables -A FORWARD -i zt+ -s 10.242.0.0/16 -d 0.0.0.0/0 -j ACCEPT 
# On ubuntu at home
ping 62.253.72.153 -I zt0 # network unreachable :-(
# On AWS
sudo tcpdump -i zt0 # shows that the packets from home are coming, but the AWS host does not route them

#+END_SRC
Well it does not work, and even if it did, the MacVLan thing would not let me route the docker container's traffic through the host.
It is mentionned here: https://docs.docker.com/engine/userguide/networking/get-started-macvlan/
An alternative would be to install ZeroTier inside the docker container => let's try that tomorrow

* 2016-11-16
** MacVLan
- on ZeroTier, check 'bridge' checkbox on the AWS ubuntu host
#+BEGIN_SRC bash
docker network create -d macvlan --subnet=10.242.0.0/16  -o parent=zt0 rosnet
docker run --dns 52.51.247.240 --net rosnet -it --rm -v /tmp/.X11-unix:/tmp/.X11-unix -e ROS_MASTER_URI=http://ev3:11311 ros-image-pipeline
ping www.google.fr # does not work :-(
ping ev3 # does not work
ping 10.242.58.128  # ip of the android phone, works !!
ping 10.242.119.232 # ip of ubuntu laptop at home, works !!
#+END_SRC
- all I need to do now is to specify the right gateway, but how can I get a gateway on the ZeroTier network ? Maybe with iptables ?
* 2016-11-15
** setup dnsmasq
#+BEGIN_SRC bash 
sudo apt install dnsmasq
vim /etc/dnsmasq.conf
interfaces=eth0 
:wq

vim /etc/hosts 
Ga
10.242.58.128 ev3
52.51.247.240 aws
:wq

sudo systemctl enable dnsmasq
ping aws
ping ev3 
nslookup ev3 aws

# On Android: change wifi settings to setup DNS
ping ev3 
ping aws
#+END_SRC  
** checked network connectivity http://wiki.ros.org/ROS/NetworkSetup
#+BEGIN_SRC bash
# Ubuntu
nc -l -p 1234
# Android on SSHDroid
echo hello from ev3|nc aws 1234
nc -l -p 1234
# Ubuntu
echo hello from aws |nc ev3 1234
#+END_SRC

** tried the image_view again:
#+BEGIN_SRC bash
docker run --dns 52.51.247.240 -it --rm -v /tmp/.X11-unix:/tmp/.X11-unix -e ROS_MASTER_URI=http://ev3:11311 ros-image-pipeline
rostopic list
rosrun image_view image_view image:=/camera/compressed
# No image :-(
rostopic echo /camera/compressed
# Unable to register with master node [http://ev3:11311]: master may not be running yet. Will keep trying.
#+END_SRC
The problem is that the android box cannot connect back to the docker container, the port is not open, and we need some routing !
There might be a solution with MacVLAN: http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/

* 2016-11-14
  - got some trouble with Ubuntu running from NoMachine: it is hanging
  - it could have been caused by the disk being full at some point yesterday, or by ros writing to X, or by the hostname renaming ?
  - recreated a new machine from snapshot with 20Gb
  - re-installed ZeroTier
  - ran the docker firefox image, OK !
  - Ran ros-image-pipeline/docker-compose up => displays an X Window, but no image :-(
  - this works:
  #+BEGIN_SRC bash
  docker build -t ros-image-pipeline .
  docker run -it --rm -e ROS_MASTER_URI=http://10.242.58.128:11311 ros-image-pipeline 
  rostopic list
  #+END_SRC
  - next step: investigate network issues: http://wiki.ros.org/ROS/NetworkSetup
* 2016-11-13
** Followed ROS tuto on docker: https://hub.docker.com/_/ros/
** ping android to/from ubuntu on aws
- install ZeroTier
  curl -s https://install.zerotier.com/ | bash
- create ZeroTier account, create new network
- check IPV4 auto-assign
sudo zerotier-cli join 565799d8f6f7f87f 
- install ZeroTier on Android, join network
- On the Website https://my.zerotier.com/network/565799d8f6f7f87f, check 'auth' on each member, and give them a good name
- let's ping
  ping 10.242.58.128 # from ubuntu
  ping 10.242.116.228 # from android
** ROS pub/sub from android to ubuntu
*** Android:
- Run local master node
- use auto IP address
 
*** Ubuntu:
docker run -it --rm  --name master ros:indigo-perception bash
export ROS_MASTER_URI=http://10.242.58.128:11311
rostopic list
# /camera/compressed !!!
#docker run --expose 11311 -it --rm     --net foo     --name master     ros:ros-tutorials     roscore
rosrun image_view image_view image:=/camera/compressed
# Doesn't work !! Docker must use X11
** Image view from a docker image
http://toddsampson.com/post/131965350342/ros-visualization-packages-in-docker
mkdir -p ~/ros/image-view
vim Dockerfile
docker build --tag ros:indigo-image-pipeline .
vim docker-compose.yml
# Paste website's compose and change ROS_MASTER_URI

*** TODO does not work !! Try another docker image that runs firefox: http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/

