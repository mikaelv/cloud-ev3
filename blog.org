* 2017-01-24
- created a docker image for lsd-slam https://github.com/tum-vision/lsd_slam
- the quickstart works, but is quite slow
- next time: try to use the Nvidia extensions for docker
* 2017-01-23
- trying to find how to do SLAM using a stereo camera
- LSD SLAM is great: https://github.com/tum-vision/lsd_slam but monocular only, 
  and does not publish live point clouds (see at the bottom of the page)
- Stereo LSD SLAM seems awesome, but no code ? https://github.com/tum-vision/lsd_slam/issues/153
- This looks alright: http://wiki.ros.org/rtabmap_ros/Tutorials/StereoOutdoorMapping
- This looks cool too: https://github.com/srv/stereo_slam
- other option: Poor man's lidar using the IR sensor and a servo: http://www.pirobot.org/blog/0014/
- Kinect equivalent: https://orbbec3d.com/product-astra/
- Cheap stereo webcam: https://www.amazon.co.uk/Konig-3D-3MP-Webcam-Glasses/dp/B004CRYEO0/ref=sr_1_1?ie=UTF8&qid=1485244797&sr=8-1&keywords=3d+webcam
- Lego pi camera mount: http://www.mindsensors.com/rpi/157-camera-mount-for-pistorms
- Raspberry driver for stereo camera: http://www.linux-projects.org/documentation/uv4l-raspicam/
* 2017-01-22
** Square using odom
- robot can do squares:  rosrun rbx1_nav odom_out_and_back.py
- but the result is not as good as in the book. However rviz display is quite close to reality
- accuracy could probably be improved with a Gyro sensor
** Square using move_base
- p 119
- setup rviz in the ros_by_example image so that I can use nav.rviz
#+BEGIN_SRC bash
docker-compose up rviz
run.sh
docker exec -it ev3_launch bash
roscd rbx1_nav/config/turtlebot
vi global_costmap_params.yaml
# change base_footprint to base_link
vi local_costmap_params.yaml
# change base_footprint to base_link
roslaunch rbx1_nav tb_move_base_blank_map.launch &
rosrun rbx1_nav move_base_square.py
#+END_SRC
- the robot arrived less than 10cm away from its original position !
- but the rviz run from docker-compose does not load nav.rviz - TODO fix for next time, it runs fine in a shell
- I can set goals to the robot, and it executes them !!

* 2017-01-16
- installed patch https://github.com/Hacks4ROS/h4r_ev3_ctrl/releases
- it solved the issue, I can now calibrate the angular motion.  
* 2017-01-15
- the robot moves without any command as soon as the motor controller is started
- spent 3 hours figuring out why. It turns out I added 1 whitespace to motor.yaml/min_acceleration !!!!
- it looks like there is a bug in this setting. If I set it to 0 I have similar issues when calibrating.
- note for later: commit things as soon as they work, revert if things are broken
- linear calibration: multiply wheel_radius by odom_linear_scale_correction
- angular calibration: reducing the wheel_separation slows down the rotations tremendously. 
  Increasing it trieggers an infinite rotation. 
- the only way to have few movements with angular_calibration is to put an angle of 2.
- rostopic echo /odom during a teleop shows that the z position barely changes
- rostopic echo /ev3dev/joint_states during a teleop shows that the position/velocities are positive for both motors.
  should one of them be negative ?
- debug motor states:
#+BEGIN_SRC bash
cd /sys/class/tacho-motor/motor1
watch -n 0.2 cat position
watch -n 0.2 cat polarity
#+END_SRC
* 2017-01-14
** Research a low cost slam sensor
- $100 Intel R200: requires powerful USB 3 board
- $150 LidarLight v2 with DIY motors: http://grauonline.de/wordpress/?page_id=1233
- $25 Hacked tUni-T UT390b telemeter: http://www.instructables.com/id/Simple-LiDAR-using-the-laser-rangefinder-Uni-T-UT3/
** Calibration
- Ros by example p. 65
#+BEGIN_SRC bash
docker exec -it ev3_launch bash
rosrun rqt_reconfigure rqt_reconfigure &
rosrun rbx1_nav calibrate_linear.py
rosrun rbx1_nav calibrate_angular.py
#+END_SRC
- Result: odom_linear_scale_correction should be 0.1092
- But no way to specify it in diffDrv
- Changed wheel_separation and wheel_radius, got better results with faster motion !

* 2017-01-10
- enabled ir proximity
- looked into the H4R code. It uses http://wiki.ros.org/ros_control
- I can find the IR YAML parameters by looking at https://github.com/Hacks4ROS/h4r_ev3_ctrl/blob/6a389638a0847b03e0fe97e9f0f5530d12af22a4/h4r_ev3_control/src/h4r_ev3_control/ev3_infrared_controller.cpp
- the diffDrive parameters are described here: http://wiki.ros.org/diff_drive_controller
- tried to use remap to change the topic names for diffDrv, with no luck. It is actually a known issue: https://github.com/ros-controls/ros_controllers/issues/126
- discovered some nice scripts on the ev3 in /usr/local/bin : I can activate all ports from there
- next time: use relay in the launch file and try to calibrate
* 2017-01-08
** Teleop works !!
#+BEGIN_SRC bash
# on ev3
vi /etc hosts
# add master and ev3_launch ips
ev3_manager

# on host
docker-compose up -d master ev3_launch
docker exec -t ev3_launch bash
rosrun topic_tools relay /cmd_vel /ev3dev/diffDrv/cmd_vel &
sudo apt-get install ros-indigo-teleop-twist-keyboard
rosrun teleop_twist_keyboard teleop_twist_keyboard.py
#+END_SRC
* 2017-01-07
- It appears that linux network bridging does not work with Wifi cards. 
  There is a solution with ebtables https://wiki.debian.org/BridgeNetworkConnections#Bridging_with_a_wireless_NIC but it is quite involved.
- the easiest will be to plug the laptop with an ethernet cable - or use the iMac remotely and launch docker containers from there.
- set up my old friend the Linksys WRT54 as an Access point, plugged on the powerline - Wifi in the living room now works like a charm
  
* 2017-01-05
** got the USB Wifi dongle
It was quite fiddly to make it work:
- the connection to the iMac shared connection seemed to work, but impossible to find the allocated IP
- then I switched to the Virgin Media router, but it was appearing as still having 192.168.10.123 instead of 192.168.0.x
- forced a pre-allocation in DHCP settings, now it appears with both addresses but at least I can ssh to it via Wifi
- now I can ssh to ev3dev.local (zero conf works !), but the docker container cannot see the rest of the wifi network !? 
  it was working yesterday with the USB ethernet
* 2017-01-04
** Another approach: H4R EV3 - linux on the EV3 brick
- installed H4R EV3, managed to SSH to the EV3 brick
- the EV3 brick does not work with an apple keyboard, you need a pc keyboard
- ordered a wifi dongle. Cannot use the Wifi AND the USB ethernet at the same time - something to do with the default interface
- improved the ros-indigo-zt/docker-compose.yml to create a rosnet network with macvlan
- the ev3dev can ping the docker container
- ran ev3_manager and ir.launch on the ev3, but got an error :
roslaunch ./ev3_ir.launch ev3_hostname:=192.168.10.123
[WARN] [WallTime: 1455389457.181423] Controller Spawner couldn't find the expected controller_manager ROS interface.
- ran ir.launch on the docker container, got the same error after having installed controller_manager
- added master in /etc/hosts on ev3dev, and added ev3dev in /etc/hosts on master
- Now I get the ir topics !!!
- Next time: change the rosnet in docker-compose to add ev3dev

* 2017-01-02
- tried to investigate why rostopic echo does not do anything
- added log information, stuff is published but does not appear in the master node
- I am tempted to give up with the android solution and use this instead: http://hacks4ros.github.io/h4r_ev3_ctrl/
* 2016-12-20
** Network connectivity check
Network connectivity is OK between Android and the docker machine. 
Tried with "nc -l -p 1234" on the Docker machine and with "curl http://masterleakimav.hopto.org:1234" on Android.
For some reason "echo hello|nc masterleakimav.hopto.org 1234" says "bad address".
On stackoverflow, people say that you need busybox for this to work with DNS.
* 2016-12-19
- tried to run the ros-teleop docker container, did not work
- rostopic echo /voltage does not work
- set up 3 noip addresses: one for ev3, one for master, one for node1. Associated them with the ZeroTier IP addresses
- set dns = 8.8.8.8 and dns_search = hopto.org in docker-compose.yml
- all nodes can now ping each other using a hostname
- but rostopic echo /voltage still does not work
- next step: use android debug to see what is going on. Would be nice to have some logs/self check in the app itself ?
* 2016-12-13
- resolved runtime issue with apache commons codec: use transitive=true for httpclient
- the App runs and can connect to the master node !!
* 2016-12-12
- trying to recompile the project
- jar hell: added transitive = false and resolved warnings one by one, by adding missing dependencies and by adding directives to proguard.
* 2016-12-09
- moved everything to one project, tried to make the project compile
* 2016-12-06
- used adb to see the logs when the app crashes. There is a missing class from dnsjava: java.lang.NoClassDefFoundError: Failed resolution of: Lorg/xbill/DNS/Address;
- started to migrate to gradle. Installed gradle in /opt. The default version with apt-get is very old
- gradle is very picky w.r.t. SDK version. It complained that I did not accept the license for version X when I specified X.0 in the build.gradle and I installed X.1
- fiddling with gradle multi-modules, can't make it compile. Next step: merge everything in one module and avoid the pain !
* 2016-12-04
- tried to echo /cmd_vel using ros_teleop. It does NOT work if I run the teleop docker container without --name... 
  ROS is very picky about hostnames, and docker run generates a new hostname every time.
- improved ros-teleop/run.sh: 3 containers with a rostopic echo. rostopic echo must be run AFTER the topic is created
  Unfortunately it seems I cannot use the arrow keys in a windows terminal with docker attach. But it works with docker run.
  It could be related to https://github.com/docker/docker/issues/13817
- setting the DNS on the Android wifi is a pain, I need to find a better solution.
  The App could have another setting for the DNS, or use zeroconf. Does zeroconf work with zerotier and docker ?
  Another option would be to use a public dns: dyndns or noip. Or maybe just set the master using a zerotier IP address ?
- tried to teleop with android connecting to the docker master, but the android app crashes. It even rebooted the OS.
  next step: make the teleop work, debug the android app

* 2016-11-27
- ev3-android: fixed connection to non-local master !
- wifi connection is patchy, random disconnections are annoying !
- if android is OFFLINE in adb, disable/enable debug over tcp/ip
- tried the calibration again p43, but no luck.
- less ~/catkin-ws/src/rbx1/rbx1_nav/nodes/calibrate_linear.py : no clue why nothing happens
* 2016-11-23
- compiled the project in IntelliJ, fixed 2 issues with deprecated methods
- cannot use Android USB over NoMachine ?
- emabled ADB over TCP/IP:
#+BEGIN_SRC bash
adb tcpip 5555
# On Android, Developer options -> enable ADB over network
adb connect ev3:5555
#+END_SRC
- /opt/android-sdk/tools has disappeared, maybe I unchecked the wrong box (platform tools)
- un-tared the android sdk and checked platform tools, now I have a new version of adb in /opt/android-sdk/platform-tools
- managed to deploy the application and got the ROS topics !! 
- next step: try the TF fix, commit the android code to github, use gradle to get rid of lib/*.jar
* 2016-11-22
- setup IntelliJ and Android SDK
- checked out Lego Ros: https://sourceforge.net/p/ev3javabrick/wiki/EV3%20communication%20library/
- there is a tf and odom publication, but it seems like they have the wrong frameId
- struggled to compile the project, it requires Android 23 and JDK 1.7
- got an error "Error:android-apt-compiler: Cannot run program "/opt/android-sdk/build-tools/23.0.3/aapt": error=2, No such file or directory". 
  It may be because my ubuntu does not support 32 bits binaries: http://stackoverflow.com/questions/19523502/how-to-make-androids-aapt-and-adb-work-on-64-bit-ubuntu-without-ia32-libs-work 
* 2016-11-20
- tried to connect from Android to master in docker, does not work. No logs, nothing using tcpdump on the docker container. I should inspect android's logs to debug this.
- lesson learned: tcpdump -i zt0 only shows stuff if you are on the same machine, ZeroTier might not broadcast packets to the whole network.
- blocked the DNS access from the docker container after having set the IP filtering on EC2 security group. Solved it by adding DNS rules
- ran rviz in docker, this will be useful for GPU acceleration: http://wiki.ros.org/docker/Tutorials/Hardware%20Acceleration
- ran teleop, I can remote control the robot !!! If rostopic list does not show the EV3 topic, unplug/replug the USB cable.
- the ping between any machine and ev3 is quite long and inconsistent, it might be due to the wifi or android being too loaded ?
- setup ros-by-example docker image, reproduced Arbotix simulation with RViz Chapter 6. I had to change the fixed frame to /odom in rviz and add an odometry visualisation
- setup rqt_reconfigure, tried to calibrate (7.4). But it looks like I am missing a tf base_link.
- rosrun tf view_frames && evince frames.pdf => nothing
    
* 2016-11-19
Cannot start the remote desktop. 
#+BEGIN_SRC bash
sudo less /usr/NX/var/log/nxserver.log
rm -rf ~/.config
sudo systemctl restart lightdm 
# Disable X11
sudo systemctl isolate multi-user.target
sudo systemctl enable multi-user.target
sudo systemctl set-default multi-user.target
sudo vi /usr/NX/etc/server.cfg
# CreateDisplay 1 
# DisplayOwner "ubuntu"
#+END_SRC
- added master in /etc/hosts
- set ROS_MASTER_URI=http://ev3:11311 solved the communication issue !!
- I can now do rostopic echo /voltage, but the image is still grey 
- Learned more about docker-compose: run can override the build's run command, used entrypoint
- solved two bugs with the image_view, but still no image: 
  - https://github.com/jsk-ros-pkg/jsk_travis/issues/187 sudo ln /dev/null /dev/raw1394
  - sudo apt-get install libcanberra-gtk*

* 2016-11-18
** ZeroTier in docker

#+BEGIN_SRC bash
docker run  -it --rm --cap-add=NET_ADMIN --cap-add=SYS_ADMIN --device=/dev/net/tun -v /tmp/.X11-unix:/tmp/.X11-unix -e ROS_MASTER_URI=http://ev3:11311 ros-image-pipeline bash
curl https://install.zerotier.com/ | bash
sudo zerotier-cli join ...
#+END_SRC
#+BEGIN_SRC bash
vim Dockerfile
# see committed file
docker build -t ros-image-pipeline  .
docker run  --dns 52.51.247.240 -it --rm -v ~/zerotier-one:/var/lib/zerotier-one --cap-add=NET_ADMIN --cap-add=SYS_ADMIN --device=/dev/net/tun -v /tmp/.X11-unix:/tmp/.X11-unix -e ROS_MASTER_URI=http://ev3:11311 ros-image-pipeline 
# identity is preserved using the volume; use a different volume for a different identity
#+END_SRC
* 2016-11-17
** Gateway
Let's try to route all my traffic through the AWS host: https://www.zerotier.com/community/topic/69/default-route-override-a-k-a-full-tunnel-in-1-1-6
If this works, I can watch irish TV !
#+BEGIN_SRC bash
sudo vi /etc/sysctl.conf
/ip_forward
0x:w

sudo iptables -t nat -A POSTROUTING -o eth0 -s 10.242.0.0/16 -j SNAT --to-source 52.51.247.240
sudo iptables -A FORWARD -i eth0 -s 0.0.0.0/0 -d 10.242.0.0/16 -j ACCEPT
sudo iptables -A FORWARD -i zt+ -s 10.242.0.0/16 -d 0.0.0.0/0 -j ACCEPT 
# On ubuntu at home
ping 62.253.72.153 -I zt0 # network unreachable :-(
# On AWS
sudo tcpdump -i zt0 # shows that the packets from home are coming, but the AWS host does not route them

#+END_SRC
Well it does not work, and even if it did, the MacVLan thing would not let me route the docker container's traffic through the host.
It is mentionned here: https://docs.docker.com/engine/userguide/networking/get-started-macvlan/
An alternative would be to install ZeroTier inside the docker container => let's try that tomorrow

* 2016-11-16
** MacVLan
- on ZeroTier, check 'bridge' checkbox on the AWS ubuntu host
#+BEGIN_SRC bash
docker network create -d macvlan --subnet=10.242.0.0/16  -o parent=zt0 rosnet
docker run --dns 52.51.247.240 --net rosnet -it --rm -v /tmp/.X11-unix:/tmp/.X11-unix -e ROS_MASTER_URI=http://ev3:11311 ros-image-pipeline
ping www.google.fr # does not work :-(
ping ev3 # does not work
ping 10.242.58.128  # ip of the android phone, works !!
ping 10.242.119.232 # ip of ubuntu laptop at home, works !!
#+END_SRC
- all I need to do now is to specify the right gateway, but how can I get a gateway on the ZeroTier network ? Maybe with iptables ?
* 2016-11-15
** setup dnsmasq
#+BEGIN_SRC bash 
sudo apt install dnsmasq
vim /etc/dnsmasq.conf
interfaces=eth0 
:wq

vim /etc/hosts 
Ga
10.242.58.128 ev3
52.51.247.240 aws
:wq

sudo systemctl enable dnsmasq
ping aws
ping ev3 
nslookup ev3 aws

# On Android: change wifi settings to setup DNS
ping ev3 
ping aws
#+END_SRC  
** checked network connectivity http://wiki.ros.org/ROS/NetworkSetup
#+BEGIN_SRC bash
# Ubuntu
nc -l -p 1234
# Android on SSHDroid
echo hello from ev3|nc aws 1234
nc -l -p 1234
# Ubuntu
echo hello from aws |nc ev3 1234
#+END_SRC

** tried the image_view again:
#+BEGIN_SRC bash
docker run --dns 52.51.247.240 -it --rm -v /tmp/.X11-unix:/tmp/.X11-unix -e ROS_MASTER_URI=http://ev3:11311 ros-image-pipeline
rostopic list
rosrun image_view image_view image:=/camera/compressed
# No image :-(
rostopic echo /camera/compressed
# Unable to register with master node [http://ev3:11311]: master may not be running yet. Will keep trying.
#+END_SRC
The problem is that the android box cannot connect back to the docker container, the port is not open, and we need some routing !
There might be a solution with MacVLAN: http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/

* 2016-11-14
  - got some trouble with Ubuntu running from NoMachine: it is hanging
  - it could have been caused by the disk being full at some point yesterday, or by ros writing to X, or by the hostname renaming ?
  - recreated a new machine from snapshot with 20Gb
  - re-installed ZeroTier
  - ran the docker firefox image, OK !
  - Ran ros-image-pipeline/docker-compose up => displays an X Window, but no image :-(
  - this works:
  #+BEGIN_SRC bash
  docker build -t ros-image-pipeline .
  docker run -it --rm -e ROS_MASTER_URI=http://10.242.58.128:11311 ros-image-pipeline 
  rostopic list
  #+END_SRC
  - next step: investigate network issues: http://wiki.ros.org/ROS/NetworkSetup
* 2016-11-13
** Followed ROS tuto on docker: https://hub.docker.com/_/ros/
** ping android to/from ubuntu on aws
- install ZeroTier
  curl -s https://install.zerotier.com/ | bash
- create ZeroTier account, create new network
- check IPV4 auto-assign
sudo zerotier-cli join 565799d8f6f7f87f 
- install ZeroTier on Android, join network
- On the Website https://my.zerotier.com/network/565799d8f6f7f87f, check 'auth' on each member, and give them a good name
- let's ping
  ping 10.242.58.128 # from ubuntu
  ping 10.242.116.228 # from android
** ROS pub/sub from android to ubuntu
*** Android:
- Run local master node
- use auto IP address
 
*** Ubuntu:
docker run -it --rm  --name master ros:indigo-perception bash
export ROS_MASTER_URI=http://10.242.58.128:11311
rostopic list
# /camera/compressed !!!
#docker run --expose 11311 -it --rm     --net foo     --name master     ros:ros-tutorials     roscore
rosrun image_view image_view image:=/camera/compressed
# Doesn't work !! Docker must use X11
** Image view from a docker image
http://toddsampson.com/post/131965350342/ros-visualization-packages-in-docker
mkdir -p ~/ros/image-view
vim Dockerfile
docker build --tag ros:indigo-image-pipeline .
vim docker-compose.yml
# Paste website's compose and change ROS_MASTER_URI

*** TODO does not work !! Try another docker image that runs firefox: http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/

